#^ и $ - начало и конец строки
#[^абв] - все символы, кроме перечисленных
#Внутри квадратных скобок не работают круглые скобки, *, . и т.д.
#{5} - предыдущее выражение должно повториться ровно 5 раз
#{3,5} - предыдущее повторяется от 3 до 5 раз
#{,} = *
#{1,} = +
#{,1} = ?
#квантификаторы не означают повторение абсолютно одинаковых фрагментов
#\s - любой "пробелообразный" символ (пробел, табуляция, новая строка)
#\w - любая буква
#\d - любая цифра
#неразрывный пробел в ворде (shift + ctrl + v)
#\W - любая НЕ буква
#\D - любая НЕ цифра
#\b - border
#Поисковые задачи
#Выяснить, содержится ли рег выражение в строке
#Найти часть строки, подходящую под рег выражение
#m = re.search(regex, string) - ищет совпадения в любом месте строки
#m = re.match(regex, string) - ищет совпадения в начале строки
#Группа - часть выражения, заключённая в скобки
#Группы номеруются по открывающей скобке
# m - объект типа "match"
#У него есть метод group
#m.group(0) - совпадает со всей строкой рег выр
#reg = u'<a\\s+href="([^"]*)">([^<]*)</a>'
#m.start(x) - номер первого символа группы номер x в строке
#m.end(x) - номер последнего символа группы номер x в строке
#(?:abc) - незапоминающая (noncapturing) группа (этого результата не будет в m.group())
#Обратные ссылки
#Обратная ссылка - способ использовать уже найденную группу в дальнейшем поиске
#Как найти текст в скобках?
#Построение выражения из частей
#v = u'[аеёиоуыэюя]'
#m = re.rearch((v + u'.*') * 4, word)
#Поиск слов с >= 4 гласнми
#Функция findall():
#   a = re.findall(u'[^;]+',s)
#Будет возвращать массив всех элементов до ;

#Открыть файл в Вики, скачатьв формате .html
#Найти все ссылки в статье

import re

def open_html(fname):
    with open (fname, 'r', encoding='utf-8') as f:
        content = f.read()
    return content

def find_links(content):
    reg = r'<a\s+href="(.*?)".*?>(.*?)</a>'
    links = re.findall(reg, content)
    return links

text = open_html('butterflies.html')
links = find_links(text)
for link in links[:20]:
    print(link[1], '-->', link[0])






        






